/**
	Pilot Light 4-Way NL2 Script
	David Wolfe (Red-Thirten)
	11/28/2024
	Extends Pilot Light. Handles additional lights' functionality.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.Block;

import obj.IndicatorLight;
import util.SceneObjectTools;

public class PilotLight4Way extends PilotLight{
	private static final String LIGHT2_ELEMENT_NAME = "light2";		// Name of the right pilot light element in the SCO/model
	private static final String LIGHT3_ELEMENT_NAME = "light3";		// Name of the bottom pilot light element in the SCO/model
	private static final String LIGHT4_ELEMENT_NAME = "light4";		// Name of the left pilot light element in the SCO/model
		
	// All Pilot Light 4-Way Functions:
	private static final int F_STATIC = 0;
	private static final int F_BLOCK_IND_4WAY = 1;
	private static final int F_SPECIAL_TRACK_4WAY = 2;
	private static final int F_SPECIAL_TRACK_INV_4WAY = 3;

	private bool inverse = false;
	
	private IndicatorLight light2;
	private IndicatorLight light3;
	private IndicatorLight light4;
	
	public bool onInit(){
		super.SCRIPT_NAME = "PilotLight4Way";		// Script name for debugging
		super.LIGHT_ELEMENT_NAME = "light1";		// Name of the top pilot light element in the SCO/model
		super.LIGHT_OBJECT_NAME = "light1";			// Name of the Scene Object Light
		
		// If PilotLight initialization succeeds, continue with self-initialization
		if(super.onInit()){
			// Create additional IndicatorLight objects
			light2 = new IndicatorLight(
				SceneObjectTools.getElementForName(sco, LIGHT2_ELEMENT_NAME, SCRIPT_NAME),
				SceneObjectTools.getLightForName(sco, LIGHT2_ELEMENT_NAME, SCRIPT_NAME),
				BLINK_INTERVAL,
				!sco.getBooleanParameter("disable_light").boolValue()
			);
			light3 = new IndicatorLight(
				SceneObjectTools.getElementForName(sco, LIGHT3_ELEMENT_NAME, SCRIPT_NAME),
				SceneObjectTools.getLightForName(sco, LIGHT3_ELEMENT_NAME, SCRIPT_NAME),
				BLINK_INTERVAL,
				!sco.getBooleanParameter("disable_light").boolValue()
			);
			light4 = new IndicatorLight(
				SceneObjectTools.getElementForName(sco, LIGHT4_ELEMENT_NAME, SCRIPT_NAME),
				SceneObjectTools.getLightForName(sco, LIGHT4_ELEMENT_NAME, SCRIPT_NAME),
				BLINK_INTERVAL,
				!sco.getBooleanParameter("disable_light").boolValue()
			);
			
			// Function-specific checks and setup
			switch (func){
				case F_STATIC_BLINK: // None/Static
					return handleStaticFunc(
						new IndicatorLight[]{light, light2, light3, light4},
						new String[]{"light1", "light2", "light3", "light4"}
					);
				//case F_BLOCK_IND: // Block Indicator (4-Way) already checked entirely by super init
				//case F_SPECIAL_TRACK: // Special Track + Inverse already checked entirely by super init
			}
			
			return true; // Everything's just dandy
		}
		else return false; // Oh noes! Everything's not dandy!
	}

	protected int getFuncFromScoParams(SceneObject sco){
		/* Get Function from SCO Parameters
			Returns the proper function number based on the "function" parameter enumeration.
		*/
		if (sco.getIntegerParameter("function") == null) return 0;

		int funcVal = sco.getIntegerParameter("function").intValue();
		switch (funcVal){
			case F_STATIC:
				return F_STATIC_BLINK; // Set to F_STATIC_BLINK to let super init return true
			case F_BLOCK_IND_4WAY:
				return F_BLOCK_IND; // Set to F_BLOCK_IND to let super init perform relative checks
			case F_SPECIAL_TRACK_INV_4WAY:
				inverse = true;
			case F_SPECIAL_TRACK_4WAY:
				return F_SPECIAL_TRACK; // Set to F_SPECIAL_TRACK to let super init perform relative checks
		}
		return funcVal; // Default
	}
	
	private bool handleStaticFunc(IndicatorLight[] lights, String[] paramNames){
		/* Handle Static Function
			Sets the lights' states, based on given static parameter names.
			Returns true if any of the lights were set to blink
			(so onNextFrame can be called).
		*/
		bool anyLightBlink = false;
		for (int i = 0; i < lights.length; i++){
			switch (sco.getIntegerParameter(paramNames[i]).intValue()){
				case 1:
					lights[i].lightOn();
					break;
				case 2:
					lights[i].lightBlink();
					anyLightBlink = true;
					break;
				default:
					lights[i].lightOff();
			}
		}
		return anyLightBlink;
	}
	
	private void handleBlockIndicator4WayFunc(){
		if (coaster.isEmergencyStop()){
			light.lightOff();
			light2.lightOn();
			light3.lightOff();
			light4.lightOff();
		}
		else{
			switch (block.getNormalModeState(Block.PROTOCOL_V1)){
				case Block.STATE_OCCUPIED:
				case Block.STATE_IN_STATION:
					light.lightOn();
					light2.lightOff();
					light3.lightOff();
					light4.lightOff();
					break;
				case Block.STATE_APPROACHING_FWD:
				case Block.STATE_APPROACHING_BWD:
					light.lightOff();
					light2.lightOff();
					light3.lightBlink();
					light4.lightOff();
					break;
				case Block.STATE_IDLE:
					light.lightOff();
					light2.lightOff();
					light3.lightOff();
					light4.lightOn();
					break;
				default:
					light.lightOff();
					light2.lightBlink();
					light3.lightOff();
					light4.lightOff();
			}
		}
	}

	private void handleSpecialTrack4WayFunc(){
		if (coaster.isEmergencyStop()){
			light.lightOff();
			light2.lightOff();
			light3.lightOff();
			light4.lightOff();
		}
		else{
			switch (specialTrack.getSwitchDirection()){
				case 0: // First track
					light.lightOff();
					light3.lightOff();
					if (inverse){
						light2.lightOn();
						light4.lightOff();
					}
					else{
						light2.lightOff();
						light4.lightOn();
					}
					break;
				case 1: // Second track
					light.lightOff();
					light3.lightOff();
					if (inverse){
						light2.lightOff();
						light4.lightOn();
					}
					else{
						light2.lightOn();
						light4.lightOff();
					}
					break;
				case -1: // Moving
					light.lightBlink();
					light2.lightOff();
					light3.lightBlink();
					light4.lightOff();
					break;
				default:
					light.lightOff();
					light2.lightBlink();
					light3.lightOff();
					light4.lightBlink();
			}
		}
	}
	
	public void onNextFrame(float tick){
		switch (func){
			case F_BLOCK_IND: // Block Indicator (4-Way)
				handleBlockIndicator4WayFunc();
				break;
			case F_SPECIAL_TRACK: // Special Track + Inverse
				handleSpecialTrack4WayFunc();
				break;
		}

		// Run IndicatorLight objects' onNextFrame() as well to animate
		light.onNextFrame(tick);
		light2.onNextFrame(tick);
		light3.onNextFrame(tick);
		light4.onNextFrame(tick);
		
		// If set to attach to special track, update translation of SCO
		if (specialTrackModule != null)
			specialTrackModule.updateTranslation();
	}
}